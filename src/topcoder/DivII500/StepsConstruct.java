package topcoder.DivII500;

import java.util.Stack;

/**
 * @author ksharma
 */
public class StepsConstruct {

    class Point{
        int r;
        int c;
        int k;
        String sb;
        public Point(int x,int y,int k,String sb){
            this.r=x;
            this.c=y;
            this.k=k;
            this.sb=sb;
        }
    }

    public String construct(String[] board, int k) {

        Point start = new Point(0,0,k, "");
        if (board[0].charAt(0) == '#' || board[board.length - 1].charAt(board[0].length() - 1) == '#') {
            return "";
        }

        Stack<Point> q=new Stack<>();

        q.push(start);

        int []rows={1,-1,0,0};
        int []cols={0,0,1,-1};
        char []dir={'D','U','R','L'};

        boolean[][][] visited = new boolean[board.length][board[0].length()][k + 1];

        while (!q.isEmpty()) {

            Point v = q.pop();
            visited[v.r][v.c][k] = true;

            if (v.k == 0 && v.r == (board.length - 1) && v.c == board[0].length() - 1) {
                return v.sb;
            }
            if (v.k == 0) {
                continue;
            }

            for (int i=0;i<rows.length;i++) {
                int dr = rows[i] + v.r;
                int dc = cols[i] + v.c;

                if ( dr >= 0 && dr < board.length && dc >= 0 && dc < board[0].length() && !visited[dr][dc][v.k - 1] && board[dr].charAt(dc) != '#') {

                    visited[dr][dc][v.k - 1] = true;
                        q.push(new Point(dr,dc, v.k - 1, v.sb+(dir[i])));

                }
            }

        }

        return "";
    }



    public static void main(String[] args) {

        StepsConstruct sc=new StepsConstruct();
        System.out.println(sc.construct(new String[]		{},3000));
    }
}
