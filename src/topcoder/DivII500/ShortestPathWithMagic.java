package topcoder.DivII500;

import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Set;

/**
 * @author ksharma
 */
public class ShortestPathWithMagic {
    class Edge{
        int dest;
        double weight;
        int k;
        public Edge(int dest,double w, int k){
            this.dest=dest;
            this.weight=w;
            this.k=k;
        }
    }
    public double getTime(String[] dist, int k){
        PriorityQueue<Edge> pq=new PriorityQueue<>((a,b)->Double.compare(a.weight,b.weight));
        Set<Integer>visited=new HashSet<>();
        pq.offer(new Edge(0,0,k));
        while(!pq.isEmpty()){
            Edge curr=pq.poll();
            if(curr.dest==1)return curr.weight;
            visited.add(curr.dest);
            for(int i=0;i<dist[0].length();i++){
                if(curr.dest==i)continue;
                if(!visited.contains(i)){
                    int currW= dist[curr.dest].charAt(i)-'0';
                    pq.offer(new Edge(i,currW+curr.weight,curr.k));
                    if(curr.k>0){
                        pq.offer(new Edge(i,curr.weight+currW/2d,k-1));
                    }
                }

            }
        }
        return -1;
    }

    public static void main(String[] args) {
        ShortestPathWithMagic sp=new ShortestPathWithMagic();
        System.out.println(sp.getTime(new String[]	{"0174094882455171152761423221685761892795431233411", "1038742779319865028602486509006138934460661849637", "7308829135984076361542097372601657541200146071777", "4880733599818266038012509478351201640618984143988", "0787008778383710734965109968348499255333743808806", "9423008198972282890781586124258626539246182119762", "4293880952003918195325258677229419698255491250839", "8715719039679976935766582544161633553282536186214", "8739795306291503649293440596342887581257444442930", "2959882960778730382520372975343211325351222640703", "4398390627040053106750045495648216831484920706070", "5181870797405673849265774579830223671554026061117", "5948323918050300483012903885770893074783710083450", "1802729957063014562035666767719162727651399592653", "7676181703570102444279237315785832411595106453089", "1566028630330420134746365281031552217482363035280", "1030781963184541072259108507905341048592541395827", "5263399348048643709617719034175332412908745680774", "2818405592693244290313630190429314820559328748143", "7650973725720027263055268929594505880132227031337", "6041682692561374511500955837837939182801848609300", "1222515630052596973500876356583948397645861551964", "4405152543079623176298054253268266394562535661446", "2890085847470636013657502682551015176002433628234", "3679968202543675890856420343684739800880514363921", "2534916559458732501983263098234023198989135142538", "2077627497978618039235584909287014819359798014755", "1928847465595751740976323890509282450440511590838", "6063322133687770914585256225072693810338480154137", "8005452644437183072938658380703585690893606978941", "5611889123800951559473814479230566666714061214952", "7162464682228185333599207002655034152316882771260", "6350921381129635431034613218986304946036245881214", "1871969371633222124598659342356440982452998386986", "8956256553860742048813318184866199062382627578278", "9344539582377211412889970915196548600208928205527", "2410598315114717820027460890006262200678781609589", "7426322223457654595186508934387304326000072552148", "9601345855858598905304608854391135807006468983551", "5008365271443152289215220990834662288060558405472", "4619714542907313573288545175460829697045014990303", "3648489342221906442246331391806849228765105076783", "1164321642060963158781534581061258781288450644195", "2801812146700540367065663105192783526594906057473", "3474015844068953984305626419571788700580974504088", "3913890620613235508191183240484116859235064740152", "4679878297014602871339429578199229255154371401032", "1378063130715588274306432353345618728457089785304", "1778629403070390743704641858712046879812335382240"},49));
    }
}
